[ { "title": null, "url": "/posts/2021-07-14-codingtest-programmers-81302/", "categories": "", "tags": "", "date": "2022-07-22 13:43:41 +0900", "snippet": "문제링크import java.util.*;class Solution2 { \t\tprivate Candidate caOne = new Candidate(-1, -1);\t public int[] solution(String[][] places) { \t int[] answer = new int[places.length]; for(int i=0; i&lt;places.length; i++) { \t\t \t\tboolean chk = true; \t\t\t for(int j=0; j&lt;places[i].length; j++) {\t \t\t \tif(!chk) {\t \t\tbreak;\t \t}\t \t\t \tString[] line = places[i][j].split(\"\");\t \t\t \tfor(int k=0; k&lt;line.length; k++) {\t \t\t\t \t\tif(\"P\".equals(line[k])) {\t \t\t\tCandidate ca = new Candidate(j, k); \t \t\t\tif(distance(places[i], ca, true)) {\t// true : 안맞음\t \t\t\t\tchk = false;\t \t\t\t\tbreak;\t \t\t\t}\t \t\t}\t \t}\t }\t \t if(chk) {\t \tanswer[i] = 1;\t } else {\t \tanswer[i] = 0;\t }\t } \t \tfor(int i : answer) { \t\tSystem.out.println(i); \t} \t return answer; } public boolean distance(String[] places, Candidate ca, boolean seq) { \t \tint[] dx = {-1,1,0,0}; \tint[] dy = {0,0,1,-1}; \t \tboolean returnVal = false; \t\t\tfor(int j=0; j&lt;dx.length; j++) {\t\t\t\t\t\tint nx = ca.getX() + dx[j];\t\t\tint ny = ca.getY() + dy[j];\t\t\t\t\t\tif(nx &lt; 0 || ny &lt; 0 || nx &gt; 4 || ny &gt; 4 || (caOne.getX() == nx &amp;&amp; caOne.getY() == ny)) {\t\t\t\tcontinue;\t\t\t}\t\t\t\t\t\tif('P' == places[nx].charAt(ny)) {\t\t\t\t// 끝\t\t\t\treturn true;\t\t\t} else if('X' == places[nx].charAt(ny)) {\t\t\t\t// 다른 방향 찾기\t\t\t} else if('O' == places[nx].charAt(ny)) {\t\t\t\t// 그 방향에서 더 찾기\t\t\t\tif(seq) {\t\t\t\t\tCandidate ca2 = new Candidate(nx, ny);\t\t\t\t\tcaOne = ca;\t\t\t\t\tif(distance(places, ca2, false)) {\t\t\t\t\t\treturnVal = true;\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\t\t\t}\t\treturn returnVal; }}// 응시자class Candidate {\t\tprivate int x;\tprivate int y;\t\tpublic Candidate(int x, int y) {\t\tthis.x = x;\t\tthis.y = y;\t}\tpublic int getX() {\t\treturn x;\t}\tpublic void setX(int x) {\t\tthis.x = x;\t}\tpublic int getY() {\t\treturn y;\t}\tpublic void setY(int y) {\t\tthis.y = y;\t}\t\t}알고리즘예시 대기실   0 1 2 3 4 0 P O O P X 1 O X O X P 2 P X P X O 3 O X X X O 4 O O O P P (2.2) P 기준   0 1 2 3 4 0     O     1   X O X   2 P X P X O 3   X X X   4     O     맨해튼 거리(2)인 다이아몬드 모양으로 체크할 수 있음 사방으로 하나씩 1씩 움직여서 X를 만나면 : 어디에 P가 있던 상관없음 &gt; 안봐도됨 P를 만나면 : 맨해튼 거리에 포함되니 해당 대기실에 대해서 0을 반환 하고 끝냄 O를 만나면 : 해당 자리에 대해서 위 조건을 다시 체크 " }, { "title": null, "url": "/posts/2021-07-04-codingtest-programmers-42586/", "categories": "", "tags": "", "date": "2022-07-22 13:43:41 +0900", "snippet": "문제링크import java.util.ArrayList;class Solution {\t public int[] solution(int[] progresses, int[] speeds) { \t \tArrayList&lt;Integer&gt; arr = new ArrayList&lt;Integer&gt;();\t\tint order = 0, completeWork = 0;\t\tboolean addCheck = false;\t\t // 최대 100번 반복\t\tfor(int i=0; i&lt;100; i++) {\t\t\tcompleteWork = 0;\t// 초기화\t\t\taddCheck = false;\t // order 시작 이유 : 이미 지나간 작업은 불필요한 작업\t\t\tfor(int j=order; j&lt;progresses.length; j++) {\t\t\t\tprogresses[j] += speeds[j]; // 진도 100% 넘으면 배열에 넣기\t\t\t\tif(progresses[order] &gt;= 100) {\t\t\t\t\torder++;\t\t\t\t\tcompleteWork++;\t\t\t\t\taddCheck = true;\t\t\t\t}\t\t\t} // 배열에 넣기\t\t\tif(addCheck) {\t\t\t\tarr.add(completeWork);\t\t\t} // 전체 작업 끝나면 종료\t\t\tif(progresses.length &lt;= order) {\t\t\t\tbreak;\t\t\t}\t\t}\t\t\t // 답 제출\t\tint[] answer = new int[arr.size()];\t\t\t\tfor(int i=0; i&lt;arr.size(); i++) {\t\t\tanswer[i] = arr.get(i);\t\t}\t\t\t\treturn answer;\t\t }}간단 알고리즘 모든 작업에 각각 개발시간을 더함 맨 앞 작업이 100을 넘는지 확인 맨 앞 작업부터 100 이상 개수 구하여 배열에 넣음 맨 앞을 3번에서 구한 개수로 바꿈 모든 작업이 끝날때까지 1~4 반복" }, { "title": null, "url": "/posts/2021-06-02-codingtest-programmers-42888/", "categories": "", "tags": "", "date": "2022-07-22 13:43:41 +0900", "snippet": "문제링크import java.util.*;public String[] solution(String[] record) {\tString[] answer = {};\t\tHashMap&lt;String, String&gt; userArr = new HashMap&lt;String, String&gt;();\t\tfor(int i=0; i&lt;record.length; i++) {\t\tUser user = new User();\t\t\t\tString[] temp = record[i].split(\" \");\t\t\t\tif(!temp[0].equals(\"Leave\")) {\t\t\tuser.setUid(temp[1]);\t\t\tuser.setName(temp[2]);\t\t\t\t\t\tuserArr.put(user.getUid(), user.getName());\t\t}\t\t\t}\t\t\tList&lt;String&gt; answerList = new ArrayList&lt;String&gt;(); \t\tfor(int i=0; i&lt;record.length; i++) {\t\t\t\tString[] temp = record[i].split(\" \");\t\t\t\tif(\"Change\".equals(temp[0])) {\t\t\tcontinue;\t\t}\t\t\t\tfor(String key : userArr.keySet()) {\t\t\t\t\t\tif(temp[1].equals(key)){\t\t\t\tString ts = \"\";\t\t\t\tts = userArr.get(key) + \"님이 \";\t\t\t\tif(\"Enter\".equals(temp[0])) {\t\t\t\t\tts += \"들어왔습니다.\";\t\t\t\t} else if(\"Leave\".equals(temp[0])) {\t\t\t\t\tts += \"나갔습니다.\";\t\t\t\t}\t\t\t\tanswerList.add(ts);\t\t\t}\t\t}\t}\t\tint arrListSize = answerList.size(); \tanswer = answerList.toArray(new String[arrListSize]);\t\treturn answer;}// 유저 정보class User {\t\tprivate String uid;\tprivate String name;\t\tpublic String getUid() {\t\treturn uid;\t}\tpublic void setUid(String uid) {\t\tthis.uid = uid;\t}\tpublic String getName() {\t\treturn name;\t}\tpublic void setName(String name) {\t\tthis.name = name;\t}\t} Map을 이용해 uid가 중복이면 마지막 바꾼 이름으로 uid의 이름을 설정 Change 제외 후 Enter, Leave에서 문장 만들기 배열에 넣기" }, { "title": null, "url": "/posts/2021-05-15-codingtest-programmers-60057/", "categories": "", "tags": "", "date": "2022-07-22 13:43:41 +0900", "snippet": "문제링크import java.util.*;public class StringCompression {\tpublic static void main(String[] args) {\t\tsolution(\"xababcdcdababcdcd\");\t}\t\tpublic static int solution(String s) {\t\t\t\tint answer = 0;\t\t\t\tArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\t\t\t\tCutLength cl = new CutLength(s);\t\tlist = cl.cutLength();\t\t\t\tanswer = Collections.min(list);\t\t\t\tSystem.out.println(answer);\t\t return answer; }}// 문자열 자르기class CutLength {\t\tprivate String s;\t\tpublic CutLength(String s) {\t\tthis.s = s;\t}\t\tpublic ArrayList&lt;Integer&gt; cutLength() {\t\t\t\tArrayList&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();\t\t\t\tfor(int i=0; i&lt;s.length()/2; i++) {\t\t\t\t\t\tArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();\t\t\t\t\t\tfor(int j=0; j&lt;s.length()-i; j+=i+1) {\t\t\t\tlist.add(s.substring(j, j+(i+1)));\t\t\t\t\t\t\t\tif(s.length()-i &lt;= j+(i+1) &amp;&amp; j+(i+1) != s.length()) {\t\t\t\t\tlist.add(s.substring(s.length()-i+1, s.length()));\t\t\t\t}\t\t\t}\t\t\t\t\t\tListValue listValue = new ListValue(list, i+1);\t\t\tresult.add(listValue.listValue());\t\t}\t\t\t\treturn result;\t\t\t}\t}// 전체 리스트 출력class ListValue {\t\tprivate ArrayList&lt;String&gt; list;\tprivate int size;\t\tpublic ListValue(ArrayList&lt;String&gt; list, int size) {\t\tthis.list = list;\t\tthis.size = size;\t}\t\tpublic int listValue() {\t\t\t\tSystem.out.println(list.toString());\t\t\t\tint returnVal = 0;\t\t\t\tStringBuilder sb = new StringBuilder();\t\t\t\tfor(int i=0; i&lt;list.size(); i++) {\t\t\tint t = 0;\t\t\tString ts = list.get(i); \t\t\tfor(int j=i+1; j&lt;list.size(); j++) {\t\t\t\tif(list.get(i).equals(list.get(j))) {\t\t\t\t\tt++;\t\t\t\t} else {\t\t\t\t\tbreak;\t\t\t\t}\t\t\t}\t\t\ti = i+t;\t\t\t\t\t\tif(t!=0) {\t\t\t\tts = t+1+ts;\t\t\t}\t\t\tsb.append(ts);\t\t}\t\tSystem.out.println(sb.toString());\t\treturn sb.toString().length();\t\t\t}} 문자열을 1~문자열사이즈까지 자른 모든 경우의 수 출력 위 경우별로 변환시켜서 길이 비교해서 가장 작은 값" }, { "title": null, "url": "/posts/2021-05-08-codingtest-programmers-60058/", "categories": "", "tags": "", "date": "2022-07-22 13:43:41 +0900", "snippet": "문제링크class Solution { public String solution(String p) { String answer = \"\"; answer += divideStr(p); return answer; } public String divideStr(String p) { if(\"\".equals(p)) { return \"\"; } String returnVal = \"\"; ArrayList&lt;String&gt; u = new ArrayList&lt;String&gt;(); ArrayList&lt;String&gt; v = new ArrayList&lt;String&gt;(); int leftBracket = 0; int rightBracket = 0; boolean uvChk = true; boolean properChk = true; String[] pArr = new String[p.length()]; pArr = p.split(\"\"); for(int i=0; i&lt;pArr.length; i++) { if(pArr[i].equals(\"(\")) { leftBracket++; } else if(pArr[i].equals(\")\")) { rightBracket++; } if(uvChk) { u.add(pArr[i]); if(leftBracket-rightBracket &lt; 0) { properChk = false; } }else { v.add(pArr[i]); } if(leftBracket == rightBracket) { uvChk = false; } } if(properChk) { // u는 올바름 // v 실행 + u return returnVal += String.join(\"\", u) + divideStr(String.join(\"\", v)); } else { // ( + v실행 + ) + u앞뒤 자르고 뒤집기 returnVal += \"(\" + divideStr(String.join(\"\", v)) + \")\" + reverseBracket(u); } return returnVal; } public String reverseBracket(ArrayList&lt;String&gt; u) { String reverse = \"\"; for(int i=1; i&lt;u.size()-1; i++) { if(\"(\".equals(u.get(i))) { reverse += \")\"; } else if(\")\".equals(u.get(i))) { reverse += \"(\"; } } return reverse; } }1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 2. 문자열 w를 두 \"균형잡힌 괄호 문자열\" u, v로 분리합니다. 단, u는 \"균형잡힌 괄호 문자열\"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 3. 문자열 u가 \"올바른 괄호 문자열\" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 4. 문자열 u가 \"올바른 괄호 문자열\"이 아니라면 아래 과정을 수행합니다. 4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 4-3. ')'를 다시 붙입니다. 4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 4-5. 생성된 문자열을 반환합니다. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. public String divideStr(String p) { if(\"\".equals(p)) { return \"\"; } ...} 문자열 w를 두 “균형잡힌 괄호 문자열” u, v로 분리합니다. 단, u는 “균형잡힌 괄호 문자열”로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다.\tString[] pArr = new String[p.length()]; pArr = p.split(\"\"); for(int i=0; i&lt;pArr.length; i++) { if(pArr[i].equals(\"(\")) { leftBracket++; } else if(pArr[i].equals(\")\")) { rightBracket++; } if(uvChk) { u.add(pArr[i]); if(leftBracket-rightBracket &lt; 0) { properChk = false; } }else { v.add(pArr[i]); } if(leftBracket == rightBracket) { uvChk = false; }\t} 문자열 u가 “올바른 괄호 문자열” 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다.\t\tif(properChk) { // u는 올바름 // v 실행 + u return returnVal += String.join(\"\", u) + divideStr(String.join(\"\", v)); } 문자열 u가 “올바른 괄호 문자열”이 아니라면 아래 과정을 수행합니다. 4-1. 빈 문자열에 첫 번째 문자로 ‘(‘를 붙입니다. 4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 4-3. ‘)’를 다시 붙입니다. 4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 4-5. 생성된 문자열을 반환합니다.if(!properChk) {\treturnVal += \"(\" + divideStr(String.join(\"\", v)) + \")\" + reverseBracket(u);}\tpublic String reverseBracket(ArrayList&lt;String&gt; u) { String reverse = \"\"; for(int i=1; i&lt;u.size()-1; i++) { if(\"(\".equals(u.get(i))) { reverse += \")\"; } else if(\")\".equals(u.get(i))) { reverse += \"(\"; } } return reverse; }" }, { "title": null, "url": "/posts/2021-05-08-codingtest-programmers-42839/", "categories": "", "tags": "", "date": "2022-07-22 13:43:41 +0900", "snippet": "문제링크import java.util.*;public class alg3 {\t\tpublic static void main(String[] args) {\t\tsolution(\"131\");\t}\tpublic static int solution(String numbers) {\t\tString[] numberArr = numbers.split(\"\");\t\tint[] arr = new int[numberArr.length]; \t\tSet&lt;Integer&gt; resultSet = new HashSet&lt;Integer&gt;();\t\tArrayList&lt;Integer&gt; resultList = new ArrayList&lt;Integer&gt;();\t\t\t\tfor(int i=0; i&lt;arr.length; i++) {\t\t\tarr[i] = Integer.valueOf(numberArr[i]);\t\t}\t\t\t\tfor(int i=1; i&lt;=arr.length; i++) {\t\t\t\t\t\tPermutation perm = new Permutation(arr.length, i); \t\t\tperm.permutation(arr, 0); \t\t\tSet&lt;Integer&gt; result = perm.getRes();\t\t\tIterator&lt;Integer&gt; it = result.iterator();\t\t\t\t\t\tArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\t\t\t\t\t\twhile (it.hasNext()) {\t\t\t\tlist.add(it.next());\t\t\t}\t\t\t\t\t\tCollections.sort(list);\t\t\t\t\t\tfor(int n : list) {\t\t\t\tArrayList&lt;Integer&gt; pList = new ArrayList&lt;Integer&gt;();\t\t\t\tPnumber pn = new Pnumber(n);\t\t\t\tpList = pn.makePnumber();\t\t\t\tfor(int j : pList) {\t\t\t\t\tresultSet.add(j);\t\t\t\t}\t\t\t}\t\t}\t\t\t\tIterator&lt;Integer&gt; it = resultSet.iterator();\t\t\t\twhile(it.hasNext()) {\t\t\tresultList.add(it.next());\t\t}\t\t\t\tCollections.sort(resultList);\t\t\t\tSystem.out.println(resultList.toString());\t\t\t\t\t\tint answer = 0;\t\treturn answer;\t}}// 소수 찾기class Pnumber {\tprivate int n;\tprivate ArrayList&lt;Integer&gt; result;\t\tpublic Pnumber(int n) {\t\tthis.n = n;\t\tthis.result = new ArrayList&lt;Integer&gt;();\t}\t\t// 짝수 제외\tpublic ArrayList&lt;Integer&gt; makePnumber() {\t\t\t\tboolean[] bool = new boolean[n+1];\t\t\t\tArrays.fill(bool, true);\t\t\t\tbool[0] = false;\t\tif(n&gt;=1) { bool[1] = false; }\t\t\t\tfor(int i=2; i*i&lt;=n; i++) {\t\t\tif(bool[i]) {\t\t\t\tfor(int j=i*i; j&lt;=n; j+=i) {\t\t\t\t\tbool[j] = false;\t\t\t\t}\t\t\t}\t\t}\t\t\t\tfor(int i=0; i&lt;=n; i++) {\t\t\tif(bool[i]==true) {\t\t\t\tresult.add(i);\t\t\t}\t\t}\t\treturn result;\t\t\t}}// 순열class Permutation { \t\tprivate int n; \tprivate int r; \tprivate int[] now; \tprivate Set&lt;Integer&gt; res; \t\tpublic Set&lt;Integer&gt; getRes() { \t\treturn res; \t} \t\tpublic Permutation(int n, int r) { \t\tthis.n = n; \t\tthis.r = r; \t\tthis.now = new int[r]; \t\tthis.res = new HashSet&lt;Integer&gt;(); \t} \t\tpublic void swap(int[] arr, int i, int j) { \t\tint temp = arr[i]; \t\tarr[i] = arr[j]; \t\tarr[j] = temp; \t} \t\tpublic void permutation(int[] arr, int depth) { \t\t\t\tif (depth == r) { \t\t\tArrayList&lt;Integer&gt; temp = new ArrayList&lt;&gt;(); \t\t\t\t\t\tfor (int i = 0; i &lt; now.length; i++) { \t\t\t\ttemp.add(now[i]);\t\t\t} \t\t\t\t\t\tStringBuilder sb = new StringBuilder();\t\t\t\t\t\tfor(int i=0; i&lt;temp.size(); i++) {\t\t\t\tsb.append(temp.get(i));\t\t\t}\t\t\tres.add(Integer.valueOf(sb.toString()));\t\t\t\t\t\treturn; \t\t} \t\t\t\tfor (int i = depth; i &lt; n; i++) { \t\t\tswap(arr, i, depth); \t\t\tnow[depth] = arr[depth];\t\t\tpermutation(arr, depth+1);\t\t\tswap(arr, i, depth); \t\t} \t\t}}에라토스테네스의 체 n의 소수의 범위 : 2 &lt;= (소수) &lt; √n 2~√n 까지의 숫자의 배수를 소거하는 식 O(NlogN)나무위키가장 큰 수를 찾아 그것의 소수만 찾으면 됨" }, { "title": "jpa repository 기능", "url": "/posts/java-spring/", "categories": "spring", "tags": "java, jpa", "date": "2021-04-14 10:00:00 +0900", "snippet": " 명칭 설명 비고 findAll() 전체 검색 select * from table findBy~() 검색   findBy~Contanining 조건 검색 select * from table where ~~ save() 저장 insert deleteBy~() 조건 삭제 delete from table where ~~ ~ = 검색컬럼명" }, { "title": "java 설치", "url": "/posts/java-install/", "categories": "project", "tags": "web, project", "date": "2021-04-14 09:00:00 +0900", "snippet": "간단한 웹 게시판 만들기기술프론트엔드 vue백엔드 java, Spring framework, jpa, nosql, MongoDB" }, { "title": "github blog 생성", "url": "/posts/github-blog-create/", "categories": "Blog", "tags": "git, github", "date": "2021-02-02 09:00:00 +0900", "snippet": "Chripy theme blognow I can make new posts" } ]
